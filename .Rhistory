dat <- dat %>%
pivot_longer(cols = 19:25) %>%
filter(value == 1) %>%
select(-value) %>%
rename(g2 = name)
dat <- read.csv('data/ihdp.csv')
names(Dat)
names(dat)
# truncate momage to group 1
dat$g1 <- dat$momage
dat$g1[dat$momage < 15] <- 15
dat$g1[dat$momage > 40] <- 40
load_ihdp <- function(){
dat <- read_csv('data/ihdp.csv')
# truncate momage to group 1
dat <- dat %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
# create g2 from dummy coded sites
dat <- dat %>%
pivot_longer(cols = 19:25) %>%
filter(value == 1) %>%
select(-value) %>%
rename(g2 = name)
return(dat)
}
load_ihdp()
# loadData <- function(){
#   dat <- readr::read_csv('data/wb_sample.csv', show_col_types = F)
#   return(dat)
# }
get_no_pool <- function(fit, .tau = tau){
average.truth <- draw$average.truth
icate.truth <- draw$icate.truth
district.cate.truth <- draw$district.cate.truth$district.cate.truth
school.cate.truth <- draw$school.cate.truth$school.cate.truth
y <- draw$sim.dat$y
average.pred <- fit$coefficients[2]
se <- sqrt(diag(vcov(fit)))[2]
interval <- c(average.pred - 1.96*se, average.pred + 1.96*se)
icate.pred <- average.pred
district.cate.pred <- average.pred
school.cate.pred <- average.pred
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = 'no pooling no p.score',
tau = .tau
)
out <- list(out)
}
get_rbart <- function(fit, .tau = tau){
average.truth <- draw$average.truth
icate.truth <- draw$icate.truth
district.cate.truth <- draw$district.cate.truth$district.cate.truth
school.cate.truth <- draw$school.cate.truth$school.cate.truth
y <- draw$sim.dat$y
y.pred <- apply(bartCause::extract(fit, "mu.obs"), 2, mean)
estimates <- summary(fit)$estimates
average.pred <- estimates$estimate
interval <- c(estimates$ci.lower, estimates$ci.upper)
samples.icate <- bartCause::extract(fit, 'icate')
icate.pred <- apply(samples.icate, 2, mean)
district <- switch (fit$estimand,
'ate' = draw$sim.dat$distric,
'att' = draw$sim.dat$district[draw$sim.dat$z ==1]
)
district.cate.pred <- unlist(lapply(split(samples.icate, district), mean))
district.cate.pred <- district.cate.pred[!is.na(district.cate.pred)]
school <- switch (fit$estimand,
'ate' = draw$sim.dat$schoolid,
'att' = draw$sim.dat$schoolid[draw$sim.dat$z ==1]
)
school.cate.pred <- unlist(lapply(split(samples.icate, school), mean))
school.cate.pred <- school.cate.pred[!is.na(school.cate.pred)]
#if(fit$)
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = 'rbart no p.score',
tau = .tau
)
out <- list(out)
return(out)
}
get_fixed_bart <- function(fit, .tau = tau){
average.truth <- draw$average.truth
icate.truth <- draw$icate.truth
district.cate.truth <- draw$district.cate.truth$district.cate.truth
school.cate.truth <- draw$school.cate.truth$school.cate.truth
y <- draw$sim.dat$y
y.pred <- apply(bartCause::extract(fit, "mu.obs"), 2, mean)
estimates <- summary(fit)$estimates
average.pred <- estimates$estimate
interval <- c(estimates$ci.lower, estimates$ci.upper)
samples.icate <- bartCause::extract(fit, 'icate')
icate.pred <- apply(samples.icate, 2, mean)
district <- switch (fit$estimand,
'ate' = draw$sim.dat$distric,
'att' = draw$sim.dat$district[draw$sim.dat$z ==1]
)
district.cate.pred <- unlist(lapply(split(samples.icate, district), mean))
district.cate.pred <- district.cate.pred[!is.na(district.cate.pred)]
school <- switch (fit$estimand,
'ate' = draw$sim.dat$schoolid,
'att' = draw$sim.dat$schoolid[draw$sim.dat$z ==1]
)
school.cate.pred <- unlist(lapply(split(samples.icate, school), mean))
school.cate.pred <- school.cate.pred[!is.na(school.cate.pred)]
#if(fit$)
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = 'fixed effect bart no p.score',
tau = .tau
)
out <- list(out)
return(out)
}
get_vanilla_bart <- function(fit, .tau = tau){
average.truth <- draw$average.truth
icate.truth <- draw$icate.truth
district.cate.truth <- draw$district.cate.truth$district.cate.truth
school.cate.truth <- draw$school.cate.truth$school.cate.truth
y <- draw$sim.dat$y
y.pred <- apply(bartCause::extract(fit, "mu.obs"), 2, mean)
estimates <- summary(fit)$estimates
average.pred <- estimates$estimate
interval <- c(estimates$ci.lower, estimates$ci.upper)
samples.icate <- bartCause::extract(fit, 'icate')
icate.pred <- apply(samples.icate, 2, mean)
district <- switch (fit$estimand,
'ate' = draw$sim.dat$distric,
'att' = draw$sim.dat$district[draw$sim.dat$z ==1]
)
district.cate.pred <- unlist(lapply(split(samples.icate, district), mean))
district.cate.pred <- district.cate.pred[!is.na(district.cate.pred)]
school <- switch (fit$estimand,
'ate' = draw$sim.dat$schoolid,
'att' = draw$sim.dat$schoolid[draw$sim.dat$z ==1]
)
school.cate.pred <- unlist(lapply(split(samples.icate, school), mean))
school.cate.pred <- school.cate.pred[!is.na(school.cate.pred)]
#if(fit$)
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = 'vanilla bart no p.score',
tau = .tau
)
out <- list(out)
return(out)
}
get_full_pool <- function(fit, .tau = tau){
average.truth <- draw$average.truth
icate.truth <- draw$icate.truth
district.cate.truth <- draw$district.cate.truth$district.cate.truth
school.cate.truth <- draw$school.cate.truth$school.cate.truth
y <- draw$sim.dat$y
average.pred <- fit$coefficients['z']
se <- sqrt(diag(vcov(fit)))['z']
interval <- c(average.pred - 1.96*se, average.pred + 1.96*se)
icate.pred <- average.pred
district.cate.pred <- average.pred
school.cate.pred <- average.pred
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = 'full pooling no p.score',
tau = .tau
)
out <- list(out)
}
get_lme4 <- function(fit, .tau = tau){
.singular <- isSingular(fit)
y <- draw$sim.dat$y
average.pred <- fit@beta[2]
se <- sqrt(diag(vcov(fit)))['z']
interval <- c(average.pred - 1.96*se, average.pred + 1.96*se)
icate.pred <- average.pred
district.cate.pred <- average.pred
school.cate.pred <- average.pred
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = 'lme4 no p.score',
tau = .tau
)
out <- list(out, .singular)
return(out)
}
get_stan4bart <- function(fit, .tau, type, estimand){
# patt
samples.ppd.train <- stan4bart:::extract.stan4bartFit(fit, type = "ppd", sample = "train")
samples.ppd.test <- stan4bart:::extract.stan4bartFit(fit, type = "ppd", sample = "test")
samples.patt <- apply((samples.ppd.train[sim.dat$z ==1,] - samples.ppd.test[sim.dat$z ==1,]) * (2 * fit$frame[[fit$treatment]][sim.dat$z ==1] - 1), 2, mean)
# icate
samples.mu.train <- stan4bart:::extract.stan4bartFit(fit)
samples.mu.test  <- stan4bart:::extract.stan4bartFit(fit, sample = "test")
samples.icate <- (samples.mu.train[sim.dat$z ==1,]  - samples.mu.test[sim.dat$z ==1,]) * (2 * fit$frame[[fit$treatment]][sim.dat$z ==1] - 1)
# results
y.pred <- apply(samples.ppd.train, 1, mean)
average.pred <- mean(samples.patt)
interval <- c(average.pred - 1.96 * sd(samples.patt), average.pred + 1.96 * sd(samples.patt))
icate.pred <- apply(samples.icate, 1, mean)
district <- switch (fit$estimand,
'ate' = draw$sim.dat$distric,
'att' = draw$sim.dat$district[draw$sim.dat$z ==1]
)
school <- switch (estimand,
'ate' = draw$sim.dat$schoolid,
'att' = draw$sim.dat$schoolid[draw$sim.dat$z ==1]
)
district.cate.pred <- unlist(lapply(split(samples.icate, district), mean))
district.cate.pred <- district.cate.pred[!is.na(district.cate.pred)]
school.cate.pred <- unlist(lapply(split(samples.icate, school), mean))
school.cate.pred <- school.cate.pred[!is.na(school.cate.pred)]
out <- data.frame(
u_bias = average.pred - draw$average.truth,
s_bias = (average.pred - draw$average.truth) /sd(y),
ci_len =(interval[2] - interval[1]) / sd(y),
cover = as.double(interval[1] <=  draw$average.truth &&  draw$average.truth <= interval[2]),
pehe = sqrt(mean((icate.pred - draw$icate.truth)^2)) / sd(y),
pehe.district = sqrt(mean((district.cate.pred - draw$district.cate.truth$district.cate.truth)^2)) / sd(y),
pehe.school = sqrt(mean((school.cate.pred - draw$school.cate.truth$school.cate.truth)^2)) / sd(y),
model = paste(type, 'stan4bart - no p.score'),
tau = .tau
)
}
get_balance <- function(rawdata, treat,estimand="ATT"){
if(missing(rawdata)) stop("rawdata is required")
if(missing(treat)) stop("treatment vector (treat) is required")
cat("Balance diagnostics assume that the estimand is the",estimand,"\n")
#
#raw.dat <- data.frame(rawdata, treat = treat)
covnames <- colnames(rawdata)
if (is.null(covnames)){
cat("No covariate names provided.  Generic names will be generated.")
covnames = paste("v",c(1:ncol(rawdata)),sep="")
}
K <- length(covnames)
diff.means <- matrix(NA, K, 5)
var.t <- numeric(K)
var.c <- numeric(K)
std.denom <- numeric(K)
binary <- rep(1,K)
for (i in 1:K) {
# separate means by group
diff.means[i, 1] <- mean(rawdata[treat==1, i])
diff.means[i, 2] <- mean(rawdata[treat==0, i])
# separate variances by group == only used as input to calculations below
var.t[i] <- var(rawdata[(treat == 1), i])
var.c[i] <- var(rawdata[(treat == 0), i])
# denominator in standardized difference calculations
if(estimand=="ATE"){std.denom[i] <- sqrt((var.t[i]+var.c[i])/2)}
else{
std.denom[i] <- ifelse(estimand=="ATT",sqrt(var.t[i]),sqrt(var.c[i]))
}
# difference in means
diff.means[i, 3] <- diff.means[i, 1] - diff.means[i, 2]
# standardized difference in means (sign intact)
diff.means[i, 4] <- abs(diff.means[i, 3]/std.denom[i])
if(length(unique(rawdata[,covnames[i]]))>2){
binary[i] = 0
diff.means[i, 5] <- sqrt(var.c[i]/var.t[i])
}
}
dimnames(diff.means) <- list(covnames, c("treat", "control", "unstd.diff",
"abs.std.diff", "ratio"))
return(diff.means)
}
ihdp <- load_ihdp()
get_balance(ihdp, 'treat', 'ATT')
get_balance(ihdp, dat$treat, 'ATT')
get_balance(ihdp, ihdp$treat, 'ATT')
warnings()
ihdp <- load_ihdp()
ihdp <- load_ihdp()
# number for each cluster
num_g1 <- length(unique(dat$g1))
# number for each cluster
num_g1 <- length(unique(ihdp$g1))
num_g2 <- length(unique(ihdp$g2))
dat <- read_csv('data/ihdp.csv')
dat <- subset(dat, treat != 1 | momwhite != 0)
load_ihdp <- function(){
dat <- read_csv('data/ihdp.csv')
dat <- subset(dat, treat != 1 | momwhite != 0)
# truncate momage to group 1
dat <- dat %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
# create g2 from dummy coded sites
dat <- dat %>%
pivot_longer(cols = 19:25) %>%
filter(value == 1) %>%
select(-value) %>%
rename(g2 = name)
return(dat)
}
apply(ihdp[, covs.cont], 2, scale)
library(tidyverse)
source('load_ihdp.R')
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
# truncate momage to group 1
ihdp <- ihdp %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
# create g2 from dummy coded sites
ihdp <- ihdp %>%
pivot_longer(cols = 19:25) %>%
filter(value == 1) %>%
select(-value) %>%
rename(g2 = name)
covs.cont <- c("bw", "b.head", "preterm", "birth.o", "nnhealth", "momage")
covs.cat  <- c("sex", "twin", "b.marr", "mom.lths", "mom.hs", "mom.scoll",
"cig", "first", "booze", "drugs", "work.dur", "prenatal")
# number for each cluster
num_g1 <- length(unique(ihdp$g1))
num_g2 <- length(unique(ihdp$g2))
apply(ihdp[, covs.cont], 2, scale)
covs.cont <- c("bw", "b.head", "preterm", "birth.o", "nnhealth")
covs.cat  <- c("sex", "twin", "b.marr", "mom.lths", "mom.hs", "mom.scoll",
"cig", "first", "booze", "drugs", "work.dur", "prenatal")
# number for each cluster
num_g1 <- length(unique(ihdp$g1))
num_g2 <- length(unique(ihdp$g2))
apply(ihdp[, covs.cont], 2, scale)
ihdp[, covs.cont] <- apply(ihdp[, covs.cont], 2, scale)
library(tidyverse)
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
# truncate momage to group 1
ihdp <- ihdp %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
# create g2 from dummy coded sites
ihdp <- ihdp %>%
pivot_longer(cols = 19:25) %>%
filter(value == 1) %>%
select(-value) %>%
rename(g2 = name)
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
# truncate momage to group 1
ihdp <- ihdp %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
names(ihdp)
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
# truncate momage to group 1
ihdp <- ihdp %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
names(ihdp)
ihdp %>%
pivot_longer(cols = 19:25) %>%
filter(value == 1) %>%
select(-value) %>%
rename(g2 = name)
ihdp %>%
pivot_longer(cols = c("ark", "ein", "har", "mia", "pen", "tex", "was" ))
ihdp %>%
pivot_longer(cols = c("ark", "ein", "har", "mia", "pen", "tex", "was" )) %>% filter(value ==1)
ihdp %>%
mutate(id = row_number()) %>%
pivot_longer(cols = c("ark", "ein", "har", "mia", "pen", "tex", "was" ))
check <- ihdp %>%
mutate(id = row_number()) %>%
pivot_longer(cols = c("ark", "ein", "har", "mia", "pen", "tex", "was" ))
View(check)
check %>% group_by(id) %>% summarise(mean(value))
check %>% group_by(id) %>% summarise(v = mean(value)) %>% filter(v ==0)
read.table(gzfile('~/Downloads/sim.data'), header = TRUE, sep = "\t")
dat <- read.table(gzfile('~/Downloads/sim.data'), header = TRUE, sep = "\t")
write_csv(dat, 'data/ihdp.csv')
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
# truncate momage to group 1
ihdp <- ihdp %>%
mutate(g1 = if_else(momage < 15 , 15, momage),
g1 = if_else(momage > 40, 40 , momage)) %>%
select(-momage)
ihdp$site.num
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
g1 <- ihdp$momage
g1[ihdp$momage > 40] <- 40
g2 <- ihdp$site.num
covs.cont <- c("bw", "b.head", "preterm", "birth.o", "nnhealth")
covs.cat  <- c("sex", "twin", "b.marr", "mom.lths", "mom.hs", "mom.scoll",
"cig", "first", "booze", "drugs", "work.dur", "prenatal")
# number for each cluster
num_g1 <- length(unique(ihdp$g1))
num_g2 <- length(unique(ihdp$g2))
num_g2 <- length(unique(g2))
# number for each cluster
num_g1 <- length(unique(g1))
num_g2 <- length(unique(g2))
# standardize continuous variables
ihdp[, covs.cont] <- apply(ihdp[, covs.cont], 2, scale)
ihdp <- read_csv('data/ihdp.csv')
ihdp <- subset(ihdp, treat != 1 | momwhite != 0)
covs.cont <- c("bw", "b.head", "preterm", "birth.o", "nnhealth", "momage")
covs.cat  <- c("sex", "twin", "b.marr", "mom.lths", "mom.hs", "mom.scoll",
"cig", "first", "booze", "drugs", "work.dur", "prenatal",
"ark", "ein", "har", "mia", "pen", "tex", "was")
z <- ihdp$treat
x <- as.matrix(ihdp[,c(covs.cont, covs.cat)])
ps <- fitted(glm(z ~ ., data.frame(z, x), family = binomial))
g1 <- ihdp$momage
g1[g1 < 16] <- 15
g1[g1 > 39] <- 40
g1 <- as.factor(g1)
g2 <- as.factor(ihdp$site.num)
p <- length(c(covs.cont, covs.cat))
list(m = rep_len(0, p), s = rep_len(1, p))
trans.x <- within(trans.x, {
m[seq_along(covs.cont)] <- apply(x[,covs.cont], 2L, mean)
s[seq_along(covs.cont)] <- apply(x[,covs.cont], 2L, sd)
})
trans.x <- list(m = rep_len(0, p), s = rep_len(1, p))
trans.x <- within(trans.x, {
m[seq_along(covs.cont)] <- apply(x[,covs.cont], 2L, mean)
s[seq_along(covs.cont)] <- apply(x[,covs.cont], 2L, sd)
})
trans.x
diag(1 / s))
diag(1 / s)
s
diag(1 / trans.x$s)
x.z <- with(trans.x, t(t(x) - m) %*% diag(1 / s))
colnames(x.z) <- colnames(x)
### create matrix of all interactions etc for third response surface
formula <- as.formula(paste0("y.tmp ~ -1 + (", paste0(c(covs.cont, covs.cat), collapse = " + "), ")^2 + ", paste0(paste0("I(", covs.cont, ")^2"), collapse = " + ")))
y.tmp <- rnorm(nrow(x.z))
temp <- glm(formula, as.data.frame(x.z), x = TRUE, family = gaussian)
x.o2 <- temp$x[,!is.na(temp$coef)]
x.o2 <- x.o2[,colnames(x.o2) %not_in% colnames(x.z)]
%not_in% = Negate(`%in%`)
`%not_in%` = Negate(%in%)
`%not_in%` = Negate(`%in%`)
x.o2 <- x.o2[,colnames(x.o2) %not_in% colnames(x.z)]
x.o2
Sigma.b = diag(c(1, 0.5))
Sigma.b
ranef.dist = function(n) rnorm(n, 0, 1)
grouping.var = c("momage", "site.num")
match.arg(grouping.var)
grouping.var = c("momage", "site.num")
match.arg(grouping.var)
n.g <- length(unique(g1))
b <- matrix(ranef.dist(n.g * 2), n.g) %*% chol(Sigma.b)
b
ranef.dist(n.g * 2)
g1
n.g <- length(unique(g1))
matrix(ranef.dist(n.g * 2), n.g)
chol(Sigma.b)
Sigma.b
b <- matrix(ranef.dist(n.g * 2), n.g) %*% chol(Sigma.b)
b
rho <- rbeta(1, 16, 4)
rho
rho <- rbeta(1, 16, 4)
rho
rho <- rbeta(1, 16, 4)
rho
rho <- rbeta(1, 16, 4)
rho
rho <- rbeta(1, 16, 4)
rho
r.var <- rf(1, 5, 7)
r.var
